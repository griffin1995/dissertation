"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Import the timedelta class from the datetime module to handle time-related calculations
from datetime import timedelta

# Import the load_dotenv function from the dotenv module to load environment variables from a .env file
from dotenv import load_dotenv

# Import the os module to interact with the operating system, such as accessing environment variables
import os

# Load environment variables from a .env file into the environment
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-&4bm^g#2n+f^34hn+jfa9dfld#u(e&c$$a3$l7net83g@vp#w0"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Allow all hostnames to access the application (not recommended for production environments due to security risks)
ALLOWED_HOSTS = ["*"]

# Configuration for Django REST framework settings
REST_FRAMEWORK = {
    # Use JWT (JSON Web Token) for authentication, provided by the SimpleJWT package
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    # Restrict access to authenticated users by default
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

# Configuration for SimpleJWT settings
SIMPLE_JWT = {
    # Set the lifetime of the access token to 30 minutes
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    # Set the lifetime of the refresh token to 1 day
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}


# Application definition

# List of applications installed in the Django project
INSTALLED_APPS = [
    # Custom application for API-related functionality
    "api",
    # Django REST framework for building APIs
    "rest_framework",
    # Middleware to handle Cross-Origin Resource Sharing (CORS) headers
    "corsheaders",
    # Default
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# List of middleware to be used in the Django project
MIDDLEWARE = [
    # Middleware to handle Cross-Origin Resource Sharing (CORS)
    "corsheaders.middleware.CorsMiddleware",
    # Default
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Allow all origins to make requests to the server (not recommended for production due to security risks)
CORS_ALLOW_ALL_ORIGINS = True

# Allow credentials such as cookies, authorization headers, or TLS client certificates in cross-origin requests
CORS_ALLOWS_CREDENTIALS = True
